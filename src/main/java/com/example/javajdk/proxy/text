
代理模式

1. 静态代理
   静态代理的缺点
   虽然静态代理实现简单，且不侵入原代码，但是，当场景稍微复杂一些的时候，静态代理的缺点也会暴露出来。

   1、当需要代理多个类的时候，由于代理对象要实现与目标对象一致的接口，有两种方式：

       只维护一个代理类，由这个代理类实现多个接口，但是这样就导致代理类过于庞大
       新建多个代理类，每个目标对象对应一个代理类，但是这样会产生过多的代理类

   2、当接口需要增加、删除、修改方法的时候，目标对象与代理类都要同时修改，不易维护。


2. 动态代理   基于反射  创建的是代理类的对象，不用创建类文件

    在程序的执行过程中，使用jdk的反射机制，创建代理类对象，并动态的指定要代理目标类

    动态代理是一种创建java对象的能力


    》》》作用
      1. 访问控制，在代理中，控制是否可以调用目标对象的方法
      2. 功能增强，可以完成在目标对象的调用是增加额外的功能

      3. 可以随时给不同的目标创建代理累

      cglib（第三方工具库，）
      原理是继承，cglib通过继承目标类，创建它的子类，在子类中重写父类中同名的方法，实现功能的修改，因为cglib是继承，所有目标类不能是final的

      代理效率高于jdk代理

========================================================================
实现JDK动态代理的步骤
1  创建接口，定义目标类要完成的功能
2  创建目标累实现接口
3  创建InvocationHandler接口的实现类，在invoke方法中完成代理类的功能
   1 调用目标方法
   2 增强功能
4  使用Proxy类的静态方法，创建代理对象，并把返回值转为接口类型


